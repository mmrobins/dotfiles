#!/usr/bin/env ruby

require 'optparse'

# from ptools https://github.com/djberg96/ptools/blob/master/lib/ptools.rb
class File
  def self.binary?(file)
    s = (File.read(file, File.stat(file).blksize) || "").split(//)
    ((s.size - s.grep(" ".."~").size) / s.size.to_f) > 0.30
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: git-rank-contributors-by-blame [options]"

  opts.on("-a", "--author [AUTHOR]", "Author breakdown by file") do |author|
    options[:author] ||= []
    options[:author] << author
  end

  opts.on("-z", "--all-authors-breakdown", "All authors breakdown by file") do |author|
    options[:all_authors] ||= []
    options[:all_authors] << author
  end

  opts.on("-x", "--exclude [EXCLUDE]", "Exclude files or directories") do |exclude|
    options[:exclude] ||= []
    options[:exclude] << exclude
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts

    puts <<-HEREDOC

    Examples:

    # Shows authors and how many lines they're
    # blamed for in all files in this directory
    git-rank-contributors-by-blame

    # Shows file breakdown for all authors
    # and excludes files in a few directories
    git-rank-contributors-by-blame -z -x spec/fixtures -x vendor

    # Shows file breakdown for just a few authors
    git-rank-contributors-by-blame -a "Bob Johnson" -a prince
    HEREDOC
    exit
  end
end.parse!

authors = Hash.new {|h, k| h[k] = h[k] = Hash.new(0)}
files = Dir.glob("**/*").reject { |f| !File.file? f or f =~ /\.git/ or File.binary? f }

options[:exclude].each do |exclude|
  files.reject! { |f| f =~ /^#{exclude}/ }
end if options[:exclude]

files.each do |f|
  lines = `git blame -w #{f}`

  unless $?.exitstatus == 0
    puts "git blame failed on #{f}"
  end

  lines.each do |l|
    l =~ / \((.*?)\d/
    raise l unless $1
    authors[$1.strip][f] += 1
    authors[$1.strip]['total'] += 1
  end
end

def print_author_breakdown(author_name, author_data, padding_size=nil)
  padding_size ||= author_name.size
  padding = ' ' * padding_size
  author_data.sort_by {|k, v| v }.each do |file, count|
    puts "#{padding} #{count} #{file}"
  end
end

if options[:author] and !options[:all_authors]
  options[:author].each do |author_name|
    puts "#{author_name} #{authors[author_name].delete('total')}"

    print_author_breakdown(author_name, authors[author_name])
  end
else
  max_author = authors.keys.max {|a,b| a.length <=> b.length }.length

  authors.sort_by {|k, v| v['total'] }.each do |author, line_counts|
    padding = ' ' * (max_author - author.size)

    puts "#{author}#{padding} #{line_counts.delete( 'total' )}"

    if options[:all_authors]
      print_author_breakdown(author, line_counts, max_author)
    end
  end
end

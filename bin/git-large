#!/usr/bin/env ruby

require 'pathname'

@sizes = {}

def dig_set(keys, size)
  key = keys.first
  if keys.length == 1
    @sizes[key] ||= { size: 0 }
    @sizes[key][:size] += size
  else
    @sizes[key] = {} unless @sizes[key]
    dig_set(@sizes[key], keys.slice(1..-1), size)
  end
end

# https://stackoverflow.com/questions/10622179/how-to-find-identify-large-commits-in-git-history/42544963#42544963

def blobs
  raw_objects = `git rev-list --objects --all --filter=object:type=blob | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)'`.split("\n")
  # even with --filter=object:type=blob some commits end up in the output
  raw_objects.select {|o| o =~ /^blob /}
end

blobs.each do |blob|
  # TODO handle spaces in file names
  _blob,sha,size,file = blob.split(' ')

  path_parts = Pathname(file).each_filename.to_a
  pp file

  path_parts.each_with_index do |part, i|
  require 'byebug'; byebug if part == 'alacritty.terminfo'
    dig_set(path_parts[0..i], size.to_i)
  end
  pp @sizes
  pp
end


#  sed -n 's/^blob //p' |
#  sort --numeric-sort --key=2 |
#  cut -c 1-12,41- |
#  $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest

#!/usr/bin/env ruby

current_branch = `git symbolic-ref --short HEAD`.chomp
if !["master", "main"].include?(current_branch)
  if $?.exitstatus == 0
    puts "WARNING: You are on branch #{current_branch}, NOT master or main."
  else
    puts "WARNING: You are not on a branch"
  end
  puts
end

# The -p will delete remote deleted branches from your local repo
# so you don't try to delete them and fail later
`git fetch -p --all`
puts "Fetching merged branches..."
remote_branches= `git branch -r --merged`.
  split("\n").
  map(&:strip).
  select {|b| b =~ /mmrobins/ || b =~ /origin/}. # should probably make this an arg or something
  #select {|b| b =~ /mmrobins/ }.
  reject {|b| b =~ /\/(#{current_branch}|master|main}staging|production|develop|v2020)/}

local_branches= `git branch --merged`.
  gsub(/^\* /, '').
  split("\n").
  map(&:strip).
  reject {|b| b =~ /(#{current_branch}|master|main|develop)/}

if remote_branches.empty? && local_branches.empty?
  puts "No existing branches have been merged into #{current_branch}."
else
  combined_branches = (remote_branches + local_branches)
  max = combined_branches.max_by(&:length).length
  formatted_branches = combined_branches.map do |b|
    branch_commit = `git log -1 --pretty=format:'%cr %an' #{b}`
    "#{b} #{' ' * (max - b.length)} #{branch_commit}"
  end
  puts "This will remove the following branches:"
  puts formatted_branches.join("\n")
  puts "Proceed?"
  if gets =~ /^y/i
    remote_branches.each do |b|
      remote, _seperator, branch = b.partition(/\//)
      `git push #{remote} :#{branch}`
    end

    # Remove local branches
    `git branch -d #{local_branches.join(' ')}`
  else
    puts "No branches removed."
  end
end
